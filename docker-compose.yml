version: "3.7"

networks:
  distributed-net:
    name: distributed-net
    driver: bridge

services:
  zookeeper:
    image: zookeeper:3.7.0
    container_name: zookeeper
    restart: "no"
    networks:
      - distributed-net
    ports:
      - "2181:2181"

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: "no"
    networks:
      - distributed-net
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    networks:
      - distributed-net
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"

  choreographerm:
    container_name: choreographerm
    restart: "no"
    networks:
      - distributed-net
    build:
      context: ./choreographerM
      dockerfile: Dockerfile
    ports:
      - "8099:8099"
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: "kafka:29092"
    depends_on:
      - kafka

  productm:
    container_name: productm
    restart: "no"
    networks:
      - distributed-net
    build:
      context: ./productM
      dockerfile: Dockerfile
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: "kafka:29092"
    depends_on:
      - kafka

  orderm:
    container_name: orderm
    restart: "no"
    networks:
      - distributed-net
    build:
      context: ./orderM
      dockerfile: Dockerfile
    environment:
      SPRING_KAFKA_BOOTSTRAPSERVERS: "kafka:29092"
    depends_on:
      - kafka